document.addEventListener("DOMContentLoaded", function() {

    let carData = JSON.parse(localStorage.getItem("carAppCarData") || "{}");
    if (!carData.mileage) carData.mileage = 0;
    if (!carData.mileageHistory) carData.mileageHistory = [];
    if (!carData.maintenanceRecords) carData.maintenanceRecords = [];
    if (!carData.itemSettings) carData.itemSettings = {};

    const maintenanceRules = [
        { name: "–ú–∞—Å–ª–æ –∏ —Ñ–∏–ª—å—Ç—Ä", kmInterval: 10000, icon: "üõ¢Ô∏è" },
        { name: "–í–æ–∑–¥—É—à–Ω—ã–π —Ñ–∏–ª—å—Ç—Ä", kmInterval: 15000, icon: "üí®" },
        { name: "–°–∞–ª–æ–Ω–Ω—ã–π —Ñ–∏–ª—å—Ç—Ä", kmInterval: 15000, icon: "üå∏" },
        { name: "–¢–æ—Ä–º–æ–∑–Ω—ã–µ –∫–æ–ª–æ–¥–∫–∏", kmInterval: 30000, icon: "üõë" },
        { name: "–¢–æ—Ä–º–æ–∑–Ω–∞—è –∂–∏–¥–∫–æ—Å—Ç—å", kmInterval: 40000, icon: "üíß" },
        { name: "–°–≤–µ—á–∏ –∑–∞–∂–∏–≥–∞–Ω–∏—è", kmInterval: 40000, icon: "‚ö°" },
        { name: "–¢–æ–ø–ª–∏–≤–Ω—ã–π —Ñ–∏–ª—å—Ç—Ä", kmInterval: 30000, icon: "‚õΩ" },
        { name: "–†–µ–º–µ–Ω—å –ì–†–ú", kmInterval: 60000, icon: "‚û∞" },
        { name: "–û—Ö–ª–∞–∂–¥–∞—é—â–∞—è –∂–∏–¥–∫–æ—Å—Ç—å", kmInterval: 60000, icon: "‚ùÑÔ∏è" },
        { name: "–¢—Ä–∞–Ω—Å–º–∏—Å—Å–∏–æ–Ω–Ω–æ–µ –º–∞—Å–ª–æ", kmInterval: 50000, icon: "‚öôÔ∏è" },
        { name: "–†–µ–º–µ–Ω—å –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞", kmInterval: 45000, icon: "üîã" }
    ];

    let currentStep = 1;
    let maintenanceData = {};

    // ===== –ü—Ä–æ–±–µ–≥ =====
    function updateMileageDisplay() {
        const el = document.getElementById("currentMileage");
        if (el) el.textContent = carData.mileage + " –∫–º";
    }
    updateMileageDisplay();

    const mileageDisplay = document.getElementById("mileageDisplay");
    if (mileageDisplay) {
        mileageDisplay.onclick = function () {
            const input = document.getElementById("mileageInputModal");
            const modal = document.getElementById("mileageModal");
            input.value = "";
            input.placeholder = carData.mileage;
            showModal(modal);
            input.focus();
        };
    }

    window.closeMileageModal = function() {
        hideModal(document.getElementById("mileageModal"));
    };

    function getMaxRecordedMileage() {
        let maxMileage = 0;
        if (carData.maintenanceRecords.length > 0) {
            maxMileage = Math.max(...carData.maintenanceRecords.map(record => record.mileage));
        }
        return maxMileage;
    }

    function validateAndUpdateMileage(newMileage) {
        const maxRecordedMileage = getMaxRecordedMileage();
        if (newMileage < maxRecordedMileage) {
            throw new Error(`–°—É–¥—è –ø–æ –≤–∞—à–∏–º –∑–∞–ø–∏—Å—è–º, –ø—Ä–æ–±–µ–≥ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –º–µ–Ω—å—à–µ ${maxRecordedMileage} –∫–º`);
        }
        carData.mileage = newMileage;
        carData.mileageHistory.push({ 
            date: new Date().toISOString().split('T')[0], 
            mileage: newMileage 
        });
        localStorage.setItem("carAppCarData", JSON.stringify(carData));
        updateMileageDisplay();
        updateMaintenanceStatus();
    }

    window.saveMileageModal = function() {
        const input = document.getElementById("mileageInputModal");
        const newMileage = Number(input.value || carData.mileage);
        try {
            validateAndUpdateMileage(newMileage);
            closeMileageModal();
        } catch (error) {
            alert(error.message);
        }
    };

    // ===== –ú–Ω–æ–≥–æ—à–∞–≥–æ–≤–æ–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è =====
    window.startMaintenanceFlow = function() {
        currentStep = 1;
        maintenanceData = {};
        
        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        document.getElementById("serviceDate").value = new Date().toISOString().split('T')[0];
        const serviceMileageInput = document.getElementById("serviceMileage");
        serviceMileageInput.value = "";
        serviceMileageInput.placeholder = carData.mileage;
        document.getElementById("serviceNotes").value = "";
        
        // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —á–µ–∫–±–æ–∫—Å—ã
        document.querySelectorAll('input[name="items"]').forEach(cb => cb.checked = false);
        
        showStep(1);
        showModal(document.getElementById("maintenanceFlowModal"));
    };

    window.closeMaintenanceFlow = function() {
        hideModal(document.getElementById("maintenanceFlowModal"));
        currentStep = 1;
        maintenanceData = {};
    };

    window.nextStep = function() {
        if (currentStep === 1) {
            const date = document.getElementById("serviceDate").value;
            const mileageInput = document.getElementById("serviceMileage");
            const mileage = Number(mileageInput.value || mileageInput.placeholder);
            
            if (!date || !mileage) {
                alert("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –ø–æ–ª—è");
                return;
            }
            
            maintenanceData.date = date;
            maintenanceData.mileage = mileage;
            showStep(2);
        } else if (currentStep === 2) {
            const checkedItems = Array.from(document.querySelectorAll('input[name="items"]:checked')).map(el => el.value);
            maintenanceData.items = checkedItems;
            showStep(3);
        }
    };

    window.prevStep = function() {
        if (currentStep === 2) {
            showStep(1);
        } else if (currentStep === 3) {
            showStep(2);
        }
    };

    window.saveMaintenance = function() {
        const notes = document.getElementById("serviceNotes").value;
        maintenanceData.notes = notes;
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –µ—Å—Ç—å –ª–∏–±–æ —Ä–∞—Å—Ö–æ–¥–Ω–∏–∫–∏, –ª–∏–±–æ –ø—Ä–∏–º–µ—á–∞–Ω–∏—è
        if ((!maintenanceData.items || maintenanceData.items.length === 0) && !notes.trim()) {
            alert("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ —Ä–∞—Å—Ö–æ–¥–Ω–∏–∫–∏ –∏–ª–∏ –æ–ø–∏—à–∏—Ç–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ä–∞–±–æ—Ç—ã");
            return;
        }
        
        // –ï—Å–ª–∏ –Ω–µ—Ç —Ä–∞—Å—Ö–æ–¥–Ω–∏–∫–æ–≤, —Å–æ–∑–¥–∞–µ–º –ø—É—Å—Ç–æ–π –º–∞—Å—Å–∏–≤
        if (!maintenanceData.items) {
            maintenanceData.items = [];
        }

        try {
            // –ï—Å–ª–∏ –ø—Ä–æ–±–µ–≥ –≤ –∑–∞–ø–∏—Å–∏ –±–æ–ª—å—à–µ —Ç–µ–∫—É—â–µ–≥–æ, –æ–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—É—â–∏–π –ø—Ä–æ–±–µ–≥
            if (maintenanceData.mileage > carData.mileage) {
                validateAndUpdateMileage(maintenanceData.mileage);
            } else {
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø—Ä–æ–±–µ–≥ –Ω–µ –º–µ–Ω—å—à–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ –≤ –∑–∞–ø–∏—Å—è—Ö
                const maxRecordedMileage = getMaxRecordedMileage();
                if (maintenanceData.mileage < maxRecordedMileage) {
                    throw new Error(`–ü—Ä–æ–±–µ–≥ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –º–µ–Ω—å—à–µ ${maxRecordedMileage} –∫–º –ø–æ –ø—Ä–µ–¥—ã–¥—É—â–∏–º –∑–∞–ø–∏—Å—è–º`);
                }
            }
            
            carData.maintenanceRecords.push(maintenanceData);
            saveData();
            closeMaintenanceFlow();
            renderMaintenanceList();
            updateMaintenanceStatus();
            renderItemsGrid();
        } catch (error) {
            alert(error.message);
        }
    };

    function showStep(step) {
        currentStep = step;
        
        // –°–∫—Ä—ã–≤–∞–µ–º –≤—Å–µ —à–∞–≥–∏
        document.querySelectorAll('.flow-step').forEach(el => el.style.display = 'none');
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω—É–∂–Ω—ã–π —à–∞–≥
        document.getElementById(`step${step}`).style.display = 'block';
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ –∫–Ω–æ–ø–æ–∫
        if (step === 2) {
            const nextBtn = document.querySelector('#step2 .modal-buttons button:last-child');
            if (nextBtn) {
                nextBtn.textContent = maintenanceData.items && maintenanceData.items.length > 0 ? '–î–∞–ª–µ–µ' : '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å';
            }
        }
    }

    function saveData() { 
        localStorage.setItem("carAppCarData", JSON.stringify(carData)); 
    }

    // ===== –ò—Å—Ç–æ—Ä–∏—è –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è =====
    function renderMaintenanceList() {
        const list = document.getElementById("maintenanceList");
        list.innerHTML = "";
        
        // –°–æ–∑–¥–∞–µ–º –∫–æ–ø–∏—é –º–∞—Å—Å–∏–≤–∞ –¥–ª—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏
        const sortedRecords = [...carData.maintenanceRecords].sort((a, b) => {
            // –°–Ω–∞—á–∞–ª–∞ —Å–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –ø—Ä–æ–±–µ–≥—É (–ø–æ —É–±—ã–≤–∞–Ω–∏—é)
            if (b.mileage !== a.mileage) {
                return b.mileage - a.mileage;
            }
            // –ï—Å–ª–∏ –ø—Ä–æ–±–µ–≥ –æ–¥–∏–Ω–∞–∫–æ–≤—ã–π, —Å–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –¥–∞—Ç–µ (–ø–æ —É–±—ã–≤–∞–Ω–∏—é)
            return new Date(b.date) - new Date(a.date);
        });

        sortedRecords.forEach((rec, i) => {
            const li = document.createElement("li");
            li.className = "card";
            
            // –í—ã—á–∏—Å–ª—è–µ–º —Å–∫–æ–ª—å–∫–æ –∫–º –Ω–∞–∑–∞–¥ –±—ã–ª–æ —Å–¥–µ–ª–∞–Ω–æ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ
            const kmAgo = carData.mileage - rec.mileage;
            let kmAgoText;
            
            if (rec.mileage === carData.mileage) {
                kmAgoText = "–ù–µ–¥–∞–≤–Ω–æ";
            } else if (kmAgo > 0) {
                kmAgoText = `${kmAgo} –∫–º –Ω–∞–∑–∞–¥`;
            } else {
                kmAgoText = "–°–µ–≥–æ–¥–Ω—è";
            }
            
            li.innerHTML = `
                <div class="km-ago">${kmAgoText}</div>
                <div class="maintenance-info">${rec.items.join(", ")}</div>
            `;
            // –ò—Å–ø–æ–ª—å–∑—É–µ–º –∏–Ω–¥–µ–∫—Å –∏–∑ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–≥–æ –º–∞—Å—Å–∏–≤–∞ –¥–ª—è openViewModal
            const originalIndex = carData.maintenanceRecords.indexOf(rec);
            li.onclick = () => openViewModal(originalIndex);
            list.appendChild(li);
        });
    }

    window.openViewModal = function(index) {
        const rec = carData.maintenanceRecords[index];
        const container = document.getElementById("maintenanceDetails");
        
        // –í—ã—á–∏—Å–ª—è–µ–º —Å–∫–æ–ª—å–∫–æ –∫–º –Ω–∞–∑–∞–¥ –±—ã–ª–æ —Å–¥–µ–ª–∞–Ω–æ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ
        const kmAgo = carData.mileage - rec.mileage;
        const kmAgoText = kmAgo > 0 ? `${kmAgo} –∫–º –Ω–∞–∑–∞–¥` : "–°–µ–≥–æ–¥–Ω—è";
        
        container.innerHTML = `
            <div style="padding: 0 1.5rem;">
                <div style="background: #f8f9fa; padding: 1rem; border-radius: 8px; margin-bottom: 1rem;">
                    <p style="margin: 0.3rem 0;"><strong>–î–∞—Ç–∞:</strong> ${rec.date}</p>
                    <p style="margin: 0.3rem 0;"><strong>–ü—Ä–æ–±–µ–≥:</strong> ${rec.mileage} –∫–º</p>
                    <p style="margin: 0.3rem 0;"><strong>–í—ã–ø–æ–ª–Ω–µ–Ω–æ:</strong> ${kmAgoText}</p>
                </div>
                ${rec.items && rec.items.length > 0 ? `
                <div style="background: #f8f9fa; padding: 1rem; border-radius: 8px; margin-bottom: 1rem;">
                    <p style="margin: 0.3rem 0;"><strong>–†–∞—Å—Ö–æ–¥–Ω–∏–∫–∏:</strong></p>
                    <p style="margin: 0.3rem 0; color: #2c3e50;">${rec.items.join(", ")}</p>
                </div>
                ` : ''}
                ${rec.notes ? `
                <div style="background: #f8f9fa; padding: 1rem; border-radius: 8px; margin-bottom: 1rem;">
                    <p style="margin: 0.3rem 0;"><strong>–ü—Ä–∏–º–µ—á–∞–Ω–∏—è:</strong></p>
                    <p style="margin: 0.3rem 0; color: #2c3e50;">${rec.notes}</p>
                </div>
                ` : ''}
                <div style="margin-top:1rem; display:flex; gap:0.5rem;">
                    <button onclick="editMaintenance(${index})">–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å</button>
                    <button onclick="deleteMaintenance(${index})" class="close-btn">–£–¥–∞–ª–∏—Ç—å</button>
                </div>
            </div>
        `;
        showModal(document.getElementById("maintenanceViewModal"));
    };

    window.closeViewModal = function() { 
        hideModal(document.getElementById("maintenanceViewModal")); 
    };

    window.deleteMaintenance = function(index) {
        if (confirm("–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –∑–∞–ø–∏—Å—å?")) {
            carData.maintenanceRecords.splice(index, 1);
            saveData();
            renderMaintenanceList();
            updateMaintenanceStatus();
            closeViewModal();
        }
    };

    window.editMaintenance = function(index) {
        const rec = carData.maintenanceRecords[index];
        closeViewModal();
        
        // –ó–∞–ø–æ–ª–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        maintenanceData = { ...rec };
        currentStep = 1;
        
        document.getElementById("serviceDate").value = rec.date;
        document.getElementById("serviceMileage").value = rec.mileage;
        document.getElementById("serviceNotes").value = rec.notes || "";
        
        document.querySelectorAll('input[name="items"]').forEach(cb => {
            cb.checked = rec.items && rec.items.includes(cb.value);
        });
        
        showStep(1);
        showModal(document.getElementById("maintenanceFlowModal"));
        
        // –ü–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª—è–µ–º —Ñ—É–Ω–∫—Ü–∏—é —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        const originalSaveMaintenance = window.saveMaintenance;
        window.saveMaintenance = function() {
            const notes = document.getElementById("serviceNotes").value;
            maintenanceData.notes = notes;
            maintenanceData.items = Array.from(document.querySelectorAll('input[name="items"]:checked')).map(cb => cb.value);
            
            if ((!maintenanceData.items || maintenanceData.items.length === 0) && !notes.trim()) {
                alert("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ —Ä–∞—Å—Ö–æ–¥–Ω–∏–∫–∏ –∏–ª–∏ –æ–ø–∏—à–∏—Ç–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ä–∞–±–æ—Ç—ã");
                return;
            }
            
            carData.maintenanceRecords[index] = maintenanceData;
            saveData();
            closeMaintenanceFlow();
            renderMaintenanceList();
            updateMaintenanceStatus();
            
            // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é
            window.saveMaintenance = originalSaveMaintenance;
        };
    };

    // ===== –°—Ç–∞—Ç—É—Å –¢–û =====
    function updateMaintenanceStatus() {
        const statusEl = document.getElementById("maintenanceStatus");
        if (!carData.mileage) { 
            statusEl.textContent = "–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—É—â–∏–π –ø—Ä–æ–±–µ–≥"; 
            statusEl.className = "status-block status-normal";
            return; 
        }

        let nextServiceKm = Infinity;
        let overdueItems = [];

        maintenanceRules.forEach(rule => {
            let lastMileage = 0;
            const recs = carData.maintenanceRecords.filter(r => r.items && r.items.includes(rule.name));
            if (recs.length) lastMileage = recs[recs.length-1].mileage;
            const kmLeft = rule.kmInterval - (carData.mileage - lastMileage);
            if (kmLeft < 0) overdueItems.push(rule.name);
            if (kmLeft < nextServiceKm) nextServiceKm = kmLeft;
        });

        // –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ –∫–ª–∞—Å—Å—ã
        statusEl.className = "status-block";
        
        if (overdueItems.length) {
            statusEl.textContent = `–°—Ä–æ—á–Ω–æ –Ω–∞ –¢–û! (${overdueItems.length} –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–æ)`;
            statusEl.classList.add("status-danger");
        } else if (nextServiceKm <= 100) {
            statusEl.textContent = `–¢–û —Å—Ä–æ—á–Ω–æ! –ß–µ—Ä–µ–∑ ${nextServiceKm} –∫–º`;
            statusEl.classList.add("status-danger");
        } else if (nextServiceKm <= 1000) {
            statusEl.textContent = `–¢–û —Å–∫–æ—Ä–æ! –ß–µ—Ä–µ–∑ ${nextServiceKm} –∫–º`;
            statusEl.classList.add("status-warning");
        } else {
            statusEl.textContent = `–°–ª–µ–¥—É—é—â–µ–µ –¢–û —á–µ—Ä–µ–∑ ${nextServiceKm} –∫–º`;
            statusEl.classList.add("status-normal");
        }
    }

    // ===== –¢–∞–±—ã –∏ —Ä–∞—Å—Ö–æ–¥–Ω–∏–∫–∏ =====
    window.switchTab = function(tabName) {
        // –û–±–Ω–æ–≤–ª—è–µ–º –∞–∫—Ç–∏–≤–Ω—É—é –∫–Ω–æ–ø–∫—É
        document.querySelectorAll('.tab-btn').forEach(btn => {
            btn.classList.remove('active');
        });
        const activeBtn = Array.from(document.querySelectorAll('.tab-btn')).find(btn => 
            btn.textContent.toLowerCase() === (tabName === 'records' ? '–∑–∞–ø–∏—Å–∏' : '—Ä–∞—Å—Ö–æ–¥–Ω–∏–∫–∏')
        );
        if (activeBtn) activeBtn.classList.add('active');

        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω—É–∂–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç
        document.querySelectorAll('.tab-content').forEach(content => {
            content.classList.remove('active');
        });
        document.getElementById(tabName + 'Tab').classList.add('active');

        if (tabName === 'items') {
            renderItemsGrid();
        }
    };

    function renderItemsGrid() {
        const grid = document.querySelector('.items-grid');
        grid.innerHTML = '';
        grid.style.display = 'flex';
        grid.style.flexDirection = 'column';

        maintenanceRules.forEach(rule => {
            const settings = carData.itemSettings[rule.name] || {};
            const customInterval = settings.interval || rule.kmInterval;
            
            // –ù–∞—Ö–æ–¥–∏–º –ø–æ—Å–ª–µ–¥–Ω—é—é –∑–∞–º–µ–Ω—É
            let lastMileage = 0;
            const recs = carData.maintenanceRecords.filter(r => r.items && r.items.includes(rule.name));
            if (recs.length) lastMileage = recs[recs.length-1].mileage;
            
            // –í—ã—á–∏—Å–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
            const kmSinceLastChange = carData.mileage - lastMileage;
            const progress = (kmSinceLastChange / customInterval) * 100;
            
            // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
            let status = '';
            let statusText = '';
            if (progress >= 100) {
                status = 'danger';
                statusText = '–¢—Ä–µ–±—É–µ—Ç—Å—è –∑–∞–º–µ–Ω–∞';
            } else if (progress >= 90) {
                status = 'warning';
                statusText = '–°–∫–æ—Ä–æ –∑–∞–º–µ–Ω–∞';
            } else {
                statusText = `–ß–µ—Ä–µ–∑ ${Math.round(customInterval - kmSinceLastChange)} –∫–º`;
            }

            const card = document.createElement('div');
            card.className = 'item-card';
            card.onclick = () => openItemEditModal(rule.name);
            card.innerHTML = `
                <div class="item-name">${rule.icon} ${rule.name}</div>
                <div class="item-progress">
                    <div class="progress-bar ${status}" style="width: ${Math.min(progress, 100)}%"></div>
                </div>
                <div class="item-info">${statusText}</div>
                ${settings.notes ? `<div class="item-info">${settings.notes}</div>` : ''}
            `;
            grid.appendChild(card);
        });
    }

    window.openItemEditModal = function(itemName) {
        const rule = maintenanceRules.find(r => r.name === itemName);
        const settings = carData.itemSettings[itemName] || {};
        
        document.querySelector('#itemEditModal .modal-header h3').textContent = 
            `${rule.icon} ${itemName}`;
        
        document.getElementById('itemInterval').value = settings.interval || rule.kmInterval;
        document.getElementById('itemInterval').placeholder = rule.kmInterval;
        document.getElementById('itemNotes').value = settings.notes || '';
        
        showModal(document.getElementById('itemEditModal'));
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–º—è —Ç–µ–∫—É—â–µ–≥–æ —Ä–∞—Å—Ö–æ–¥–Ω–∏–∫–∞ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏
        document.getElementById('itemEditModal').dataset.itemName = itemName;
    };

    window.closeItemEditModal = function() {
        hideModal(document.getElementById('itemEditModal'));
    };

    window.saveItemEdit = function() {
        const modal = document.getElementById('itemEditModal');
        const itemName = modal.dataset.itemName;
        const interval = Number(document.getElementById('itemInterval').value);
        const notes = document.getElementById('itemNotes').value.trim();
        
        if (!carData.itemSettings[itemName]) {
            carData.itemSettings[itemName] = {};
        }
        
        if (interval) {
            carData.itemSettings[itemName].interval = interval;
        }
        
        if (notes) {
            carData.itemSettings[itemName].notes = notes;
        }
        
        saveData();
        renderItemsGrid();
        closeItemEditModal();
    };

    // ===== –ú–æ–¥–∞–ª–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –¢–û =====
    window.openStatusModal = function() {
        const container = document.getElementById("statusList");
        container.innerHTML = "";
        maintenanceRules.forEach(rule => {
            let lastMileage = 0;
            const recs = carData.maintenanceRecords.filter(r => r.items && r.items.includes(rule.name));
            if (recs.length) lastMileage = recs[recs.length - 1].mileage;
            const kmLeft = rule.kmInterval - (carData.mileage - lastMileage);

            const div = document.createElement("div");
            div.className = "list-item";
            const spanName = document.createElement("span");
            spanName.textContent = rule.name;
            spanName.style.fontWeight = "500";
            const spanStatus = document.createElement("span");
            spanStatus.textContent = kmLeft > 0 ? `–ß–µ—Ä–µ–∑ ${kmLeft} –∫–º` : "–ü—Ä–æ—Å—Ä–æ—á–µ–Ω–æ!";
            spanStatus.className = kmLeft > 0 ? "status-ok" : "status-due";
            div.appendChild(spanName);
            div.appendChild(spanStatus);
            container.appendChild(div);
        });

        showModal(document.getElementById("statusModal"));
    };

    window.closeStatusModal = function() { 
        hideModal(document.getElementById("statusModal")); 
    };

    // ===== –£—Ç–∏–ª–∏—Ç—ã –¥–ª—è –º–æ–¥–∞–ª—å–Ω—ã—Ö –æ–∫–æ–Ω =====
    function showModal(modal) {
        modal.style.display = "flex";
        setTimeout(() => {
            modal.classList.add("show");
        }, 10);
    }

    function hideModal(modal) {
        modal.classList.remove("show");
        setTimeout(() => {
            modal.style.display = "none";
        }, 300);
    }

    // ===== –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è =====
    renderMaintenanceList();
    updateMaintenanceStatus();

});
